// Code generated by command: go run gen.go -out ../md5block_amd64.s -stubs ../md5block_amd64.go -pkg=md5simd. DO NOT EDIT.

// +build !appengine
// +build !noasm
// +build gc

#include "textflag.h"

// func blockScalar(dig *[4]uint32, p []byte)
TEXT Â·blockScalar(SB), NOSPLIT, $0-32
	MOVQ p_len+16(FP), AX
	MOVQ dig+0(FP), CX
	MOVQ p_base+8(FP), DX
	SHRQ $0x06, AX
	SHLQ $0x06, AX
	LEAQ (DX)(AX*1), AX
	CMPQ DX, AX
	JEQ  end
	MOVL (CX), BX
	MOVL 4(CX), SI
	MOVL 8(CX), DI
	MOVL 12(CX), CX
	MOVL $0xffffffff, R8

loop:
	MOVL (DX), R9
	MOVL CX, R10
	MOVL BX, R11
	MOVL SI, R12
	MOVL DI, R13
	MOVL CX, R14

	// ROUND1
	XORL DI, R10
	ADDL $0xd76aa478, BX
	ADDL R9, BX
	ANDL SI, R10
	XORL CX, R10
	MOVL 4(DX), R9
	ADDL R10, BX
	ROLL $0x07, BX
	MOVL DI, R10
	ADDL SI, BX
	XORL SI, R10
	ADDL $0xe8c7b756, CX
	ADDL R9, CX
	ANDL BX, R10
	XORL DI, R10
	MOVL 8(DX), R9
	ADDL R10, CX
	ROLL $0x0c, CX
	MOVL SI, R10
	ADDL BX, CX
	XORL BX, R10
	ADDL $0x242070db, DI
	ADDL R9, DI
	ANDL CX, R10
	XORL SI, R10
	MOVL 12(DX), R9
	ADDL R10, DI
	ROLL $0x11, DI
	MOVL BX, R10
	ADDL CX, DI
	XORL CX, R10
	ADDL $0xc1bdceee, SI
	ADDL R9, SI
	ANDL DI, R10
	XORL BX, R10
	MOVL 16(DX), R9
	ADDL R10, SI
	ROLL $0x16, SI
	MOVL CX, R10
	ADDL DI, SI
	XORL DI, R10
	ADDL $0xf57c0faf, BX
	ADDL R9, BX
	ANDL SI, R10
	XORL CX, R10
	MOVL 20(DX), R9
	ADDL R10, BX
	ROLL $0x07, BX
	MOVL DI, R10
	ADDL SI, BX
	XORL SI, R10
	ADDL $0x4787c62a, CX
	ADDL R9, CX
	ANDL BX, R10
	XORL DI, R10
	MOVL 24(DX), R9
	ADDL R10, CX
	ROLL $0x0c, CX
	MOVL SI, R10
	ADDL BX, CX
	XORL BX, R10
	ADDL $0xa8304613, DI
	ADDL R9, DI
	ANDL CX, R10
	XORL SI, R10
	MOVL 28(DX), R9
	ADDL R10, DI
	ROLL $0x11, DI
	MOVL BX, R10
	ADDL CX, DI
	XORL CX, R10
	ADDL $0xfd469501, SI
	ADDL R9, SI
	ANDL DI, R10
	XORL BX, R10
	MOVL 32(DX), R9
	ADDL R10, SI
	ROLL $0x16, SI
	MOVL CX, R10
	ADDL DI, SI
	XORL DI, R10
	ADDL $0x698098d8, BX
	ADDL R9, BX
	ANDL SI, R10
	XORL CX, R10
	MOVL 36(DX), R9
	ADDL R10, BX
	ROLL $0x07, BX
	MOVL DI, R10
	ADDL SI, BX
	XORL SI, R10
	ADDL $0x8b44f7af, CX
	ADDL R9, CX
	ANDL BX, R10
	XORL DI, R10
	MOVL 40(DX), R9
	ADDL R10, CX
	ROLL $0x0c, CX
	MOVL SI, R10
	ADDL BX, CX
	XORL BX, R10
	ADDL $0xffff5bb1, DI
	ADDL R9, DI
	ANDL CX, R10
	XORL SI, R10
	MOVL 44(DX), R9
	ADDL R10, DI
	ROLL $0x11, DI
	MOVL BX, R10
	ADDL CX, DI
	XORL CX, R10
	ADDL $0x895cd7be, SI
	ADDL R9, SI
	ANDL DI, R10
	XORL BX, R10
	MOVL 48(DX), R9
	ADDL R10, SI
	ROLL $0x16, SI
	MOVL CX, R10
	ADDL DI, SI
	XORL DI, R10
	ADDL $0x6b901122, BX
	ADDL R9, BX
	ANDL SI, R10
	XORL CX, R10
	MOVL 52(DX), R9
	ADDL R10, BX
	ROLL $0x07, BX
	MOVL DI, R10
	ADDL SI, BX
	XORL SI, R10
	ADDL $0xfd987193, CX
	ADDL R9, CX
	ANDL BX, R10
	XORL DI, R10
	MOVL 56(DX), R9
	ADDL R10, CX
	ROLL $0x0c, CX
	MOVL SI, R10
	ADDL BX, CX
	XORL BX, R10
	ADDL $0xa679438e, DI
	ADDL R9, DI
	ANDL CX, R10
	XORL SI, R10
	MOVL 60(DX), R9
	ADDL R10, DI
	ROLL $0x11, DI
	MOVL BX, R10
	ADDL CX, DI
	XORL CX, R10
	ADDL $0x49b40821, SI
	ADDL R9, SI
	ANDL DI, R10
	XORL BX, R10
	MOVL 4(DX), R9
	ADDL R10, SI
	ROLL $0x16, SI
	MOVL CX, R10
	ADDL DI, SI

	// ROUND2
	MOVL CX, R10
	MOVL CX, R15
	XORL R8, R10
	ADDL $0xf61e2562, BX
	ADDL R9, BX
	ANDL SI, R15
	ANDL DI, R10
	MOVL 24(DX), R9
	ADDL R10, BX
	ADDL R15, BX
	MOVL DI, R10
	MOVL DI, R15
	ROLL $0x05, BX
	ADDL SI, BX
	XORL R8, R10
	ADDL $0xc040b340, CX
	ADDL R9, CX
	ANDL BX, R15
	ANDL SI, R10
	MOVL 44(DX), R9
	ADDL R10, CX
	ADDL R15, CX
	MOVL SI, R10
	MOVL SI, R15
	ROLL $0x09, CX
	ADDL BX, CX
	XORL R8, R10
	ADDL $0x265e5a51, DI
	ADDL R9, DI
	ANDL CX, R15
	ANDL BX, R10
	MOVL (DX), R9
	ADDL R10, DI
	ADDL R15, DI
	MOVL BX, R10
	MOVL BX, R15
	ROLL $0x0e, DI
	ADDL CX, DI
	XORL R8, R10
	ADDL $0xe9b6c7aa, SI
	ADDL R9, SI
	ANDL DI, R15
	ANDL CX, R10
	MOVL 20(DX), R9
	ADDL R10, SI
	ADDL R15, SI
	MOVL CX, R10
	MOVL CX, R15
	ROLL $0x14, SI
	ADDL DI, SI
	XORL R8, R10
	ADDL $0xd62f105d, BX
	ADDL R9, BX
	ANDL SI, R15
	ANDL DI, R10
	MOVL 40(DX), R9
	ADDL R10, BX
	ADDL R15, BX
	MOVL DI, R10
	MOVL DI, R15
	ROLL $0x05, BX
	ADDL SI, BX
	XORL R8, R10
	ADDL $0x02441453, CX
	ADDL R9, CX
	ANDL BX, R15
	ANDL SI, R10
	MOVL 60(DX), R9
	ADDL R10, CX
	ADDL R15, CX
	MOVL SI, R10
	MOVL SI, R15
	ROLL $0x09, CX
	ADDL BX, CX
	XORL R8, R10
	ADDL $0xd8a1e681, DI
	ADDL R9, DI
	ANDL CX, R15
	ANDL BX, R10
	MOVL 16(DX), R9
	ADDL R10, DI
	ADDL R15, DI
	MOVL BX, R10
	MOVL BX, R15
	ROLL $0x0e, DI
	ADDL CX, DI
	XORL R8, R10
	ADDL $0xe7d3fbc8, SI
	ADDL R9, SI
	ANDL DI, R15
	ANDL CX, R10
	MOVL 36(DX), R9
	ADDL R10, SI
	ADDL R15, SI
	MOVL CX, R10
	MOVL CX, R15
	ROLL $0x14, SI
	ADDL DI, SI
	XORL R8, R10
	ADDL $0x21e1cde6, BX
	ADDL R9, BX
	ANDL SI, R15
	ANDL DI, R10
	MOVL 56(DX), R9
	ADDL R10, BX
	ADDL R15, BX
	MOVL DI, R10
	MOVL DI, R15
	ROLL $0x05, BX
	ADDL SI, BX
	XORL R8, R10
	ADDL $0xc33707d6, CX
	ADDL R9, CX
	ANDL BX, R15
	ANDL SI, R10
	MOVL 12(DX), R9
	ADDL R10, CX
	ADDL R15, CX
	MOVL SI, R10
	MOVL SI, R15
	ROLL $0x09, CX
	ADDL BX, CX
	XORL R8, R10
	ADDL $0xf4d50d87, DI
	ADDL R9, DI
	ANDL CX, R15
	ANDL BX, R10
	MOVL 32(DX), R9
	ADDL R10, DI
	ADDL R15, DI
	MOVL BX, R10
	MOVL BX, R15
	ROLL $0x0e, DI
	ADDL CX, DI
	XORL R8, R10
	ADDL $0x455a14ed, SI
	ADDL R9, SI
	ANDL DI, R15
	ANDL CX, R10
	MOVL 52(DX), R9
	ADDL R10, SI
	ADDL R15, SI
	MOVL CX, R10
	MOVL CX, R15
	ROLL $0x14, SI
	ADDL DI, SI
	XORL R8, R10
	ADDL $0xa9e3e905, BX
	ADDL R9, BX
	ANDL SI, R15
	ANDL DI, R10
	MOVL 8(DX), R9
	ADDL R10, BX
	ADDL R15, BX
	MOVL DI, R10
	MOVL DI, R15
	ROLL $0x05, BX
	ADDL SI, BX
	XORL R8, R10
	ADDL $0xfcefa3f8, CX
	ADDL R9, CX
	ANDL BX, R15
	ANDL SI, R10
	MOVL 28(DX), R9
	ADDL R10, CX
	ADDL R15, CX
	MOVL SI, R10
	MOVL SI, R15
	ROLL $0x09, CX
	ADDL BX, CX
	XORL R8, R10
	ADDL $0x676f02d9, DI
	ADDL R9, DI
	ANDL CX, R15
	ANDL BX, R10
	MOVL 48(DX), R9
	ADDL R10, DI
	ADDL R15, DI
	MOVL BX, R10
	MOVL BX, R15
	ROLL $0x0e, DI
	ADDL CX, DI
	XORL R8, R10
	ADDL $0x8d2a4c8a, SI
	ADDL R9, SI
	ANDL DI, R15
	ANDL CX, R10
	MOVL 20(DX), R9
	ADDL R10, SI
	ADDL R15, SI
	MOVL CX, R10
	MOVL CX, R15
	ROLL $0x14, SI
	ADDL DI, SI

	// ROUND3
	MOVL CX, R10
	XORL DI, R10
	XORL SI, R10
	ADDL $0xfffa3942, BX
	ADDL R9, BX
	MOVL 32(DX), R9
	ADDL R10, BX
	ROLL $0x04, BX
	ADDL SI, BX
	XORL CX, R10
	XORL BX, R10
	ADDL $0x8771f681, CX
	ADDL R9, CX
	MOVL 44(DX), R9
	ADDL R10, CX
	ROLL $0x0b, CX
	ADDL BX, CX
	XORL DI, R10
	XORL CX, R10
	ADDL $0x6d9d6122, DI
	ADDL R9, DI
	MOVL 56(DX), R9
	ADDL R10, DI
	ROLL $0x10, DI
	ADDL CX, DI
	XORL SI, R10
	XORL DI, R10
	ADDL $0xfde5380c, SI
	ADDL R9, SI
	MOVL 4(DX), R9
	ADDL R10, SI
	ROLL $0x17, SI
	ADDL DI, SI
	XORL BX, R10
	XORL SI, R10
	ADDL $0xa4beea44, BX
	ADDL R9, BX
	MOVL 16(DX), R9
	ADDL R10, BX
	ROLL $0x04, BX
	ADDL SI, BX
	XORL CX, R10
	XORL BX, R10
	ADDL $0x4bdecfa9, CX
	ADDL R9, CX
	MOVL 28(DX), R9
	ADDL R10, CX
	ROLL $0x0b, CX
	ADDL BX, CX
	XORL DI, R10
	XORL CX, R10
	ADDL $0xf6bb4b60, DI
	ADDL R9, DI
	MOVL 40(DX), R9
	ADDL R10, DI
	ROLL $0x10, DI
	ADDL CX, DI
	XORL SI, R10
	XORL DI, R10
	ADDL $0xbebfbc70, SI
	ADDL R9, SI
	MOVL 52(DX), R9
	ADDL R10, SI
	ROLL $0x17, SI
	ADDL DI, SI
	XORL BX, R10
	XORL SI, R10
	ADDL $0x289b7ec6, BX
	ADDL R9, BX
	MOVL (DX), R9
	ADDL R10, BX
	ROLL $0x04, BX
	ADDL SI, BX
	XORL CX, R10
	XORL BX, R10
	ADDL $0xeaa127fa, CX
	ADDL R9, CX
	MOVL 12(DX), R9
	ADDL R10, CX
	ROLL $0x0b, CX
	ADDL BX, CX
	XORL DI, R10
	XORL CX, R10
	ADDL $0xd4ef3085, DI
	ADDL R9, DI
	MOVL 24(DX), R9
	ADDL R10, DI
	ROLL $0x10, DI
	ADDL CX, DI
	XORL SI, R10
	XORL DI, R10
	ADDL $0x04881d05, SI
	ADDL R9, SI
	MOVL 36(DX), R9
	ADDL R10, SI
	ROLL $0x17, SI
	ADDL DI, SI
	XORL BX, R10
	XORL SI, R10
	ADDL $0xd9d4d039, BX
	ADDL R9, BX
	MOVL 48(DX), R9
	ADDL R10, BX
	ROLL $0x04, BX
	ADDL SI, BX
	XORL CX, R10
	XORL BX, R10
	ADDL $0xe6db99e5, CX
	ADDL R9, CX
	MOVL 60(DX), R9
	ADDL R10, CX
	ROLL $0x0b, CX
	ADDL BX, CX
	XORL DI, R10
	XORL CX, R10
	ADDL $0x1fa27cf8, DI
	ADDL R9, DI
	MOVL 8(DX), R9
	ADDL R10, DI
	ROLL $0x10, DI
	ADDL CX, DI
	XORL SI, R10
	XORL DI, R10
	ADDL $0xc4ac5665, SI
	ADDL R9, SI
	MOVL (DX), R9
	ADDL R10, SI
	ROLL $0x17, SI
	ADDL DI, SI

	// ROUND4
	MOVL R8, R10
	XORL CX, R10
	ADDL $0xf4292244, BX
	ADDL R9, BX
	ORL  SI, R10
	XORL DI, R10
	ADDL R10, BX
	MOVL 28(DX), R9
	MOVL R8, R10
	ROLL $0x06, BX
	XORL DI, R10
	ADDL SI, BX
	ADDL $0x432aff97, CX
	ADDL R9, CX
	ORL  BX, R10
	XORL SI, R10
	ADDL R10, CX
	MOVL 56(DX), R9
	MOVL R8, R10
	ROLL $0x0a, CX
	XORL SI, R10
	ADDL BX, CX
	ADDL $0xab9423a7, DI
	ADDL R9, DI
	ORL  CX, R10
	XORL BX, R10
	ADDL R10, DI
	MOVL 20(DX), R9
	MOVL R8, R10
	ROLL $0x0f, DI
	XORL BX, R10
	ADDL CX, DI
	ADDL $0xfc93a039, SI
	ADDL R9, SI
	ORL  DI, R10
	XORL CX, R10
	ADDL R10, SI
	MOVL 48(DX), R9
	MOVL R8, R10
	ROLL $0x15, SI
	XORL CX, R10
	ADDL DI, SI
	ADDL $0x655b59c3, BX
	ADDL R9, BX
	ORL  SI, R10
	XORL DI, R10
	ADDL R10, BX
	MOVL 12(DX), R9
	MOVL R8, R10
	ROLL $0x06, BX
	XORL DI, R10
	ADDL SI, BX
	ADDL $0x8f0ccc92, CX
	ADDL R9, CX
	ORL  BX, R10
	XORL SI, R10
	ADDL R10, CX
	MOVL 40(DX), R9
	MOVL R8, R10
	ROLL $0x0a, CX
	XORL SI, R10
	ADDL BX, CX
	ADDL $0xffeff47d, DI
	ADDL R9, DI
	ORL  CX, R10
	XORL BX, R10
	ADDL R10, DI
	MOVL 4(DX), R9
	MOVL R8, R10
	ROLL $0x0f, DI
	XORL BX, R10
	ADDL CX, DI
	ADDL $0x85845dd1, SI
	ADDL R9, SI
	ORL  DI, R10
	XORL CX, R10
	ADDL R10, SI
	MOVL 32(DX), R9
	MOVL R8, R10
	ROLL $0x15, SI
	XORL CX, R10
	ADDL DI, SI
	ADDL $0x6fa87e4f, BX
	ADDL R9, BX
	ORL  SI, R10
	XORL DI, R10
	ADDL R10, BX
	MOVL 60(DX), R9
	MOVL R8, R10
	ROLL $0x06, BX
	XORL DI, R10
	ADDL SI, BX
	ADDL $0xfe2ce6e0, CX
	ADDL R9, CX
	ORL  BX, R10
	XORL SI, R10
	ADDL R10, CX
	MOVL 24(DX), R9
	MOVL R8, R10
	ROLL $0x0a, CX
	XORL SI, R10
	ADDL BX, CX
	ADDL $0xa3014314, DI
	ADDL R9, DI
	ORL  CX, R10
	XORL BX, R10
	ADDL R10, DI
	MOVL 52(DX), R9
	MOVL R8, R10
	ROLL $0x0f, DI
	XORL BX, R10
	ADDL CX, DI
	ADDL $0x4e0811a1, SI
	ADDL R9, SI
	ORL  DI, R10
	XORL CX, R10
	ADDL R10, SI
	MOVL 16(DX), R9
	MOVL R8, R10
	ROLL $0x15, SI
	XORL CX, R10
	ADDL DI, SI
	ADDL $0xf7537e82, BX
	ADDL R9, BX
	ORL  SI, R10
	XORL DI, R10
	ADDL R10, BX
	MOVL 44(DX), R9
	MOVL R8, R10
	ROLL $0x06, BX
	XORL DI, R10
	ADDL SI, BX
	ADDL $0xbd3af235, CX
	ADDL R9, CX
	ORL  BX, R10
	XORL SI, R10
	ADDL R10, CX
	MOVL 8(DX), R9
	MOVL R8, R10
	ROLL $0x0a, CX
	XORL SI, R10
	ADDL BX, CX
	ADDL $0x2ad7d2bb, DI
	ADDL R9, DI
	ORL  CX, R10
	XORL BX, R10
	ADDL R10, DI
	MOVL 36(DX), R9
	MOVL R8, R10
	ROLL $0x0f, DI
	XORL BX, R10
	ADDL CX, DI
	ADDL $0xeb86d391, SI
	ADDL R9, SI
	ORL  DI, R10
	XORL CX, R10
	ADDL R10, SI
	ROLL $0x15, SI
	ADDL DI, SI
	ADDL R11, BX
	ADDL R12, SI
	ADDL R13, DI
	ADDL R14, CX

	// Prepare next loop
	ADDQ $0x40, DX
	CMPQ DX, AX
	JB   loop

	// Write output
	MOVQ dig+0(FP), AX
	MOVL BX, (AX)
	MOVL SI, 4(AX)
	MOVL DI, 8(AX)
	MOVL CX, 12(AX)

end:
	RET
